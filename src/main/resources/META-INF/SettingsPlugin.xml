<application>
  <component name="freeriders.mag.settings.ide.state.AppSettingsState">
    <option name="idePresets" value="[{&quot;name&quot;:&quot;Clean Archi test&quot;,&quot;content&quot;:{&quot;name&quot;:&quot;Zoom&quot;,&quot;type&quot;:&quot;DIRECTORY&quot;}},{&quot;name&quot;:&quot;Test with content&quot;,&quot;content&quot;:{&quot;name&quot;:&quot;sr1&quot;,&quot;type&quot;:&quot;DIRECTORY&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;bean&quot;,&quot;type&quot;:&quot;DIRECTORY&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;MyFile.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.bean;\r\n\r\nimport lombok.*;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * Class to store the file informations.\r\n */\r\n@Data\r\npublic class MyFile {\r\n\r\n    private String name;\r\n    private boolean isDir;\r\n    private List\u003cMyFile\u003e children;\r\n\r\n    private String fullPath;\r\n\r\n    private String size;\r\n\r\n    public MyFile(String name, boolean isDir, List\u003cMyFile\u003e children, String fullPath, String size) {\r\n        this.name \u003d name;\r\n        this.isDir \u003d isDir;\r\n        this.children \u003d children;\r\n        this.fullPath \u003d fullPath;\r\n        this.size \u003d size;\r\n    }\r\n\r\n}\r\n&quot;},{&quot;name&quot;:&quot;package-info.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;/**\r\n * Package to store all the beans used in the application.\r\n */\r\npackage com.antoine.maille.sr1.bean;\r\n\r\n&quot;}]},{&quot;name&quot;:&quot;command&quot;,&quot;type&quot;:&quot;DIRECTORY&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;commands&quot;,&quot;type&quot;:&quot;DIRECTORY&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;Command.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.command.commands;\r\n\r\nimport lombok.Getter;\r\nimport com.antoine.maille.sr1.utils.CustomSocket;\r\n\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\n@Getter\r\npublic abstract class Command {\r\n\r\n    /**\r\n     * the socket to launch the command in\r\n     */\r\n    CustomSocket socket;\r\n\r\n    /**\r\n     * PrintWriter to write to the server\r\n     */\r\n    protected PrintWriter out;\r\n\r\n    /**\r\n     * BufferedReader to read from the server\r\n     */\r\n    protected java.io.BufferedReader in;\r\n\r\n    /**\r\n     * The command name\r\n     */\r\n    protected FTPCommand command;\r\n\r\n\r\n    public Command(FTPCommand command, CustomSocket socket) {\r\n        this.out \u003d socket.getWriter();\r\n        this.in \u003d socket.getReader();\r\n        this.command \u003d command;\r\n        this.socket \u003d socket;\r\n    }\r\n\r\n\r\n    /**\r\n     * Sends the command to the server with a message\r\n     */\r\n    public String send(String message) throws IOException {\r\n        //System.err.println(\&quot;sending \&quot; + command.getCommand());\r\n        out.println(command.getCommand() + \&quot; \&quot; + message);\r\n        out.flush();\r\n        String res \u003d this.in.readLine();\r\n        //System.err.println(res);\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Sends the command to the server\r\n     */\r\n    public String send() throws IOException {\r\n        //System.err.println(\&quot;sending \&quot; + command.getCommand());\r\n        out.println(command.getCommand());\r\n        out.flush();\r\n        String res \u003d this.in.readLine();\r\n        //System.err.println(res);\r\n        return res;\r\n    }\r\n}\r\n&quot;},{&quot;name&quot;:&quot;FTPCommand.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.command.commands;\r\n\r\npublic enum FTPCommand {\r\n    USER(\&quot;USER\&quot;, \&quot;USER\&quot;),\r\n    PASS(\&quot;PASS\&quot;, \&quot;PASS\&quot;),\r\n    PASV(\&quot;PASV\&quot;, \&quot;PASV\&quot;),\r\n    CWD(\&quot;CWD\&quot;, \&quot;250\&quot;),\r\n    PWD(\&quot;PWD\&quot;, \&quot;257\&quot;),\r\n    LIST(\&quot;LIST\&quot;, \&quot;150\&quot;),\r\n    QUIT(\&quot;QUIT\&quot;, \&quot;221\&quot;);\r\n\r\n    private final String command;\r\n    private final String code;\r\n\r\n    FTPCommand(String command, String code) {\r\n        this.command \u003d command;\r\n        this.code \u003d code;\r\n    }\r\n\r\n    public String getCommand() {\r\n        return command;\r\n    }\r\n\r\n    public String getCode() {\r\n        return code;\r\n    }\r\n}\r\n&quot;},{&quot;name&quot;:&quot;impl&quot;,&quot;type&quot;:&quot;DIRECTORY&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;CWD.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.command.commands.impl;\r\n\r\nimport com.antoine.maille.sr1.command.commands.Command;\r\nimport com.antoine.maille.sr1.command.commands.FTPCommand;\r\nimport com.antoine.maille.sr1.utils.CustomSocket;\r\n\r\n/**\r\n * Singleton class to use the command User\r\n */\r\npublic class CWD extends Command {\r\n\r\n    public CWD(CustomSocket socket) {\r\n        super(FTPCommand.CWD, socket);\r\n    }\r\n\r\n\r\n}\r\n&quot;},{&quot;name&quot;:&quot;List.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.command.commands.impl;\r\n\r\nimport com.antoine.maille.sr1.command.commands.Command;\r\nimport com.antoine.maille.sr1.command.commands.FTPCommand;\r\nimport com.antoine.maille.sr1.utils.CustomSocket;\r\n\r\n/**\r\n * Singleton class to use the command User\r\n */\r\npublic class List extends Command {\r\n\r\n    public List(CustomSocket socket) {\r\n        super(FTPCommand.LIST, socket);\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n&quot;},{&quot;name&quot;:&quot;package-info.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;/**\r\n * The implÃ©mentation of the FTP commands\r\n */\r\npackage com.antoine.maille.sr1.command.commands.impl;&quot;},{&quot;name&quot;:&quot;Password.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.command.commands.impl;\r\n\r\nimport com.antoine.maille.sr1.command.commands.Command;\r\nimport com.antoine.maille.sr1.command.commands.FTPCommand;\r\nimport com.antoine.maille.sr1.utils.CustomSocket;\r\n\r\n/**\r\n * Singleton class to use the command User\r\n */\r\npublic class Password extends Command {\r\n\r\n    public Password(CustomSocket socket) {\r\n        super(FTPCommand.PASS, socket);\r\n    }\r\n\r\n}\r\n&quot;},{&quot;name&quot;:&quot;PasV.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.command.commands.impl;\r\n\r\nimport com.antoine.maille.sr1.command.commands.Command;\r\nimport com.antoine.maille.sr1.command.commands.FTPCommand;\r\nimport lombok.Getter;\r\nimport com.antoine.maille.sr1.utils.CustomSocket;\r\n\r\nimport java.io.IOException;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\n/**\r\n * Singleton class to use the command User\r\n */\r\n@Getter\r\npublic class PasV extends Command {\r\n\r\n    String adress;\r\n\r\n    int port;\r\n\r\n    public PasV(CustomSocket socket) {\r\n        super(FTPCommand.PASV, socket);\r\n    }\r\n\r\n    @Override\r\n    public String send() throws IOException {\r\n        String res \u003d super.send();\r\n        // Search for the IP and port number in the PASV response\r\n        Pattern pattern \u003d Pattern.compile(\&quot;\\\\((\\\\d+),(\\\\d+),(\\\\d+),(\\\\d+),(\\\\d+),(\\\\d+)\\\\)\&quot;);\r\n        Matcher matcher \u003d pattern.matcher(res);\r\n\r\n        if (matcher.find()) {\r\n            // Convert the IP and port number from the PASV response\r\n            this.adress \u003d  matcher.group(1) + \&quot;.\&quot; + matcher.group(2) + \&quot;.\&quot; + matcher.group(3) + \&quot;.\&quot; + matcher.group(4);\r\n            this.port \u003d Integer.parseInt(matcher.group(5)) * 256 + Integer.parseInt(matcher.group(6));\r\n        }\r\n        return res;\r\n    }\r\n}\r\n&quot;},{&quot;name&quot;:&quot;User.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.command.commands.impl;\r\n\r\nimport com.antoine.maille.sr1.command.commands.Command;\r\nimport com.antoine.maille.sr1.command.commands.FTPCommand;\r\nimport com.antoine.maille.sr1.utils.CustomSocket;\r\n\r\n/**\r\n * Singleton class to use the command User\r\n */\r\npublic class User extends Command {\r\n\r\n    public User(CustomSocket socket) {\r\n        super(FTPCommand.USER, socket);\r\n    }\r\n\r\n\r\n}\r\n&quot;}]},{&quot;name&quot;:&quot;package-info.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;/**\r\n * The FTP commands\r\n */\r\npackage com.antoine.maille.sr1.command.commands;&quot;}]},{&quot;name&quot;:&quot;package-info.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;/**\r\n * Package to store all the commands used in the application and the tree command.\r\n */\r\npackage com.antoine.maille.sr1.command;&quot;},{&quot;name&quot;:&quot;TreeFTP.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.command;\r\n\r\nimport com.antoine.maille.sr1.bean.MyFile;\r\nimport com.antoine.maille.sr1.command.commands.impl.*;\r\nimport com.antoine.maille.sr1.utils.CustomSocket;\r\nimport com.antoine.maille.sr1.utils.Utils;\r\nimport com.antoine.maille.sr1.utils.printer.TreePrinter;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * Class to manage the FTP tree command.\r\n */\r\npublic class TreeFTP {\r\n\r\n    /**\r\n     * The url to access\r\n     */\r\n    private final String url;\r\n\r\n    /**\r\n     * The userName to connect with\r\n     */\r\n    private final String userName;\r\n\r\n    /**\r\n     * The password to connect with\r\n     */\r\n    private final String password;\r\n\r\n    /**\r\n     * The socket to connect to the url\r\n     */\r\n    private CustomSocket controlSocket;\r\n\r\n    private final TreePrinter printer;\r\n\r\n    private final int maxDepth;\r\n\r\n    private final boolean directoriesOnly;\r\n\r\n    private final boolean printAllFiles;\r\n\r\n\r\n    public TreeFTP(String url, String userName, String password, TreePrinter printer, int maxDepth, boolean directoriesOnly, boolean printAllFiles) {\r\n        this.url \u003d url;\r\n        this.userName \u003d userName;\r\n        this.password \u003d password;\r\n        this.printer \u003d printer;\r\n        this.maxDepth \u003d maxDepth;\r\n        this.directoriesOnly \u003d directoriesOnly;\r\n        this.printAllFiles \u003d printAllFiles;\r\n    }\r\n\r\n    /**\r\n     * Try to connect to the server *url*\r\n     * @throws IOException if the connection to the server fails\r\n     */\r\n    public void connect() throws IOException {\r\n        this.controlSocket \u003d this.createSocket(this.url, 21);\r\n        // read and discard the welcome message from the server\r\n        System.out.println(this.controlSocket.getReader().readLine());\r\n        //we send the user command to the server\r\n        new User(this.controlSocket).send(this.userName);\r\n        //we send the user command to the server\r\n        new Password(this.controlSocket).send(this.password);\r\n    }\r\n\r\n    /**\r\n     * List the files of the current directory\r\n     */\r\n    public void listFiles() throws IOException {\r\n        System.out.println(this.printer.readResponse(this.listFilesHelper(\&quot;/\&quot;, 0)));\r\n    }\r\n\r\n    /**\r\n     * Helper function for the listFiles command\r\n     * @param dir the dir to list\r\n     * @param depth the depth we\u0027re currently at\r\n     * @return the formatted string of the files in dir\r\n     * @throws IOException an IOException occurred\r\n     * @see java.net.Socket\r\n     * @see java.io.BufferedReader\r\n     */\r\n    private java.util.List\u003cMyFile\u003e listFilesHelper(String dir, int depth)throws IOException {\r\n        //we send the PASV command to the server\r\n        new CWD(controlSocket).send(dir);\r\n\r\n\r\n        PasV pasV \u003d new PasV(this.controlSocket);\r\n        pasV.send();\r\n        CustomSocket dataSocket \u003d new CustomSocket(pasV.getAdress(), pasV.getPort());\r\n        //we send the user command to the server\r\n        new List(this.controlSocket).send();\r\n\r\n        //we process the result\r\n        String line;\r\n        java.util.List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();\r\n        while ((line \u003d dataSocket.getReader().readLine()) !\u003d null) {\r\n            lines.add(line);\r\n        }\r\n\r\n        this.controlSocket.getReader().readLine();\r\n\r\n        java.util.List\u003cMyFile\u003e res \u003d new ArrayList\u003c\u003e();\r\n        //For each line we process it to make an output and call the helper if there\u0027s a dir\r\n        for (String fileLine : lines) {\r\n            boolean isDir \u003d Utils.isDir(fileLine);\r\n            boolean isHidden \u003d Utils.isHidden(fileLine);\r\n            String size \u003d Utils.getFileSize(fileLine);\r\n            String name \u003d Utils.getFileName(fileLine);\r\n            MyFile file \u003d new MyFile(name, isDir, new ArrayList\u003c\u003e(), isDir? dir + name + \&quot;/\&quot; : dir + name, size);\r\n            if (isDir \u0026\u0026 this.maxDepth !\u003d depth) {\r\n                file.setChildren(this.listFilesHelper(dir + name + \&quot;/\&quot;, depth + 1));\r\n            }\r\n            // We add the file if it\u0027s a directory or if we do not list only directories\r\n            // And if we print all files or the file is not hidden\r\n            if((printAllFiles || !isHidden) \u0026\u0026 (!directoriesOnly || isDir)) res.add(file);\r\n        }\r\n        dataSocket.close();\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Creates the socket and the in \u0026 out object to write and read\r\n     * @throws IOException if the connection to the server fails\r\n     */\r\n    private CustomSocket createSocket(String url, int port) throws IOException {\r\n        // create a socket to connect to the FTP server\r\n        return new CustomSocket(url, port);\r\n    }\r\n\r\n\r\n}\r\n&quot;}]},{&quot;name&quot;:&quot;exception&quot;,&quot;type&quot;:&quot;DIRECTORY&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;package-info.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;/**\r\n * Package to store all the exceptions used in the application.\r\n */\r\npackage com.antoine.maille.sr1.exception;&quot;},{&quot;name&quot;:&quot;WrongCommandException.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.exception;\r\n\r\n/**\r\n * Exception if the command is malformed\r\n */\r\npublic class WrongCommandException extends Exception{\r\n\r\n    public WrongCommandException(String message) {\r\n        super(message);\r\n    }\r\n}\r\n&quot;}]},{&quot;name&quot;:&quot;Main.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1;\r\n\r\nimport com.antoine.maille.sr1.command.TreeFTP;\r\nimport com.antoine.maille.sr1.exception.WrongCommandException;\r\nimport com.antoine.maille.sr1.utils.printer.TreePrinter;\r\nimport com.antoine.maille.sr1.utils.printer.impl.DefaultPrinter;\r\nimport com.antoine.maille.sr1.utils.printer.impl.JsonPrinter;\r\nimport joptsimple.OptionException;\r\nimport joptsimple.OptionParser;\r\nimport joptsimple.OptionSet;\r\n\r\nimport java.io.IOException;\r\n\r\n/**\r\n * Main class to launch the application\r\n */\r\npublic class Main\r\n{\r\n    public static void main( String[] args ) {\r\n        TreeFTP treeFTP;\r\n        try {\r\n            treeFTP \u003d createFTP(args);\r\n        } catch (WrongCommandException e) {\r\n            System.err.println(e.getMessage());\r\n            return;\r\n        }\r\n        try {\r\n            treeFTP.connect();\r\n        } catch (IOException e) {\r\n            System.err.println(e.getMessage());\r\n            return;\r\n        }\r\n        try {\r\n            treeFTP.listFiles();\r\n        } catch (IOException e) {\r\n            System.err.println(e.getMessage());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse the arguments of the command and creates the tree-ftp command\r\n     * @return the TreeFTP command\r\n     */\r\n    public static TreeFTP createFTP(String [] args) throws WrongCommandException {\r\n        OptionSet options;\r\n        try{\r\n            options \u003d parseOptions(args);\r\n        }\r\n        catch(IOException e){\r\n            throw new WrongCommandException(\&quot;An error happened during the parsing of the options\&quot;);\r\n        }\r\n        //we set the base values to anonymous \u0026 \&quot;\&quot; so we can try anonymous connection if nothing is specified\r\n        String url \u003d(String) options.valueOf(\&quot;url\&quot;);\r\n        boolean listDirectoriesOnly \u003d options.has(\&quot;d\&quot;);\r\n        boolean printFullPath \u003d options.has(\&quot;f\&quot;);\r\n        boolean size \u003d options.has(\&quot;h\&quot;);\r\n        int maxDepth \u003d options.hasArgument(\&quot;L\&quot;) ? (Integer) options.valueOf(\&quot;L\&quot;) : -1;\r\n        String username \u003d options.hasArgument(\&quot;user\&quot;) ? (String) options.valueOf(\&quot;u\&quot;) : \&quot;anonymous\&quot;;\r\n        String password \u003d options.hasArgument(\&quot;pass\&quot;) ? (String) options.valueOf(\&quot;p\&quot;) : \&quot;\&quot;;\r\n        boolean noIndentation \u003d options.has(\&quot;i\&quot;);\r\n        boolean listAllFiles \u003d options.has(\&quot;a\&quot;);\r\n        boolean jsonOutput \u003d options.has(\&quot;j\&quot;);\r\n\r\n        TreePrinter printer \u003d jsonOutput? new JsonPrinter(printFullPath, size, !noIndentation) : new DefaultPrinter(printFullPath, size, !noIndentation);\r\n\r\n        return new TreeFTP(url, username, password, printer, maxDepth, listDirectoriesOnly, listAllFiles);\r\n    }\r\n\r\n    /**\r\n     * Parses the options of the command Line\r\n     * @param args the command line args\r\n     * @return an OptionSet containing the options\r\n     * @throws IOException if an error happens during the parsing\r\n     */\r\n    public static OptionSet parseOptions(String[] args) throws IOException {\r\n        OptionParser parser \u003d new OptionParser();\r\n        parser.accepts(\&quot;url\&quot;).withRequiredArg().ofType(String.class).required().describedAs(\&quot;url of the server\&quot;);\r\n        parser.accepts(\&quot;pass\&quot;).withOptionalArg().ofType(String.class).describedAs(\&quot;The password to connect with\&quot;);\r\n        parser.accepts(\&quot;user\&quot;).requiredIf(\&quot;pass\&quot;).withOptionalArg().ofType(String.class).describedAs(\&quot;The username to connect with\&quot;);\r\n        parser.accepts(\&quot;d\&quot;).withOptionalArg().describedAs(\&quot;List directories only.\&quot;);\r\n        parser.accepts(\&quot;f\&quot;).withOptionalArg().describedAs(\&quot;Print the full path prefix for each file.\&quot;);\r\n        parser.accepts(\&quot;h\&quot;).withOptionalArg().describedAs(\&quot;Print the size of directories in a human-readable format.\&quot;);\r\n        parser.accepts(\&quot;L\&quot;).withOptionalArg().ofType(Integer.class).describedAs(\&quot;depth of the tree to display.\&quot;);\r\n        parser.accepts(\&quot;i\&quot;).withOptionalArg().describedAs(\&quot;Don\u0027t print indentation lines.\&quot;);\r\n        parser.accepts(\&quot;a\&quot;).withOptionalArg().describedAs(\&quot;List all files, including hidden files.\&quot;);\r\n        parser.accepts(\&quot;j\&quot;).withOptionalArg().describedAs(\&quot;Print the tree with Json format.\&quot;);\r\n\r\n        try {\r\n            return parser.parse(args);\r\n        } catch (OptionException e) {\r\n            System.err.println(e.getMessage());\r\n            parser.printHelpOn(System.err);\r\n            System.exit(1);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n&quot;},{&quot;name&quot;:&quot;package-info.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;/**\r\n * Main package for the tree command.\r\n */\r\npackage com.antoine.maille.sr1;&quot;},{&quot;name&quot;:&quot;utils&quot;,&quot;type&quot;:&quot;DIRECTORY&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;CustomSocket.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.utils;\r\n\r\nimport lombok.Getter;\r\n\r\nimport java.io.*;\r\nimport java.net.Socket;\r\n\r\n/**\r\n * Custom socket to handle the communication with the server.\r\n */\r\n@Getter\r\npublic class CustomSocket extends Socket {\r\n        private static final int PORT \u003d 21;\r\n        private final BufferedReader reader;\r\n        private final PrintWriter writer;\r\n\r\n    /**\r\n     * @param serverAddress the server adress\r\n     * @param port the port to connect to\r\n     * @throws IOException an IOException occurred\r\n     * @see Socket\r\n     */\r\n    public CustomSocket(String serverAddress, int port) throws IOException {\r\n            super(serverAddress, port);\r\n            InputStream input \u003d this.getInputStream();\r\n            OutputStream output \u003d this.getOutputStream();\r\n            this.reader \u003d new BufferedReader(new InputStreamReader(input));\r\n            this.writer \u003d new PrintWriter(output, true);\r\n        }\r\n\r\n    }\r\n\r\n\r\n&quot;},{&quot;name&quot;:&quot;package-info.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;/**\r\n * Package to store all the utils used in the application.\r\n */\r\npackage com.antoine.maille.sr1.utils;&quot;},{&quot;name&quot;:&quot;printer&quot;,&quot;type&quot;:&quot;DIRECTORY&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;impl&quot;,&quot;type&quot;:&quot;DIRECTORY&quot;,&quot;children&quot;:[{&quot;name&quot;:&quot;DefaultPrinter.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.utils.printer.impl;\r\n\r\nimport com.antoine.maille.sr1.bean.MyFile;\r\nimport com.antoine.maille.sr1.utils.printer.TreePrinter;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * Default implementation of the {@link TreePrinter} interface.\r\n */\r\npublic class DefaultPrinter  extends TreePrinter {\r\n\r\n\r\n    public DefaultPrinter(boolean fullPath, boolean printSize, boolean identation) {\r\n        super(fullPath, printSize,identation );\r\n    }\r\n\r\n    @Override\r\n    public String readResponse(List\u003cMyFile\u003e files) {\r\n        return this.readResponseHelper(files, 0);\r\n    }\r\n\r\n    @Override\r\n    public String readResponseHelper(List\u003cMyFile\u003e files, int depth) {\r\n        StringBuilder builder \u003d new StringBuilder(\&quot;\&quot;);\r\n        for (int i \u003d 0; i \u003c files.size(); i++) {\r\n            MyFile file \u003d files.get(i);\r\n            if(this.identation) {\r\n                builder.append(\&quot; \&quot;.repeat(Math.max(0, depth * 3)));\r\n                if (i \u003d\u003d files.size() - 1) {\r\n                    builder.append(\&quot;â””â”€â”€\&quot;);\r\n                } else {\r\n                    builder.append(\&quot;â”œâ”€â”€\&quot;);\r\n                }\r\n            }\r\n            if(printSize) {\r\n                builder.append(\&quot; [\&quot;);\r\n                builder.append(file.getSize());\r\n                builder.append(\&quot;] \&quot;);\r\n            }\r\n            builder.append(this.fullPath ? file.getFullPath():file.getName());\r\n            builder.append(\&quot;\\n\&quot;);\r\n            builder.append(this.readResponseHelper(file.getChildren(), depth + 1));\r\n        }\r\n        return builder.toString();\r\n    }\r\n\r\n}\r\n&quot;},{&quot;name&quot;:&quot;JsonPrinter.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.utils.printer.impl;\r\n\r\nimport com.antoine.maille.sr1.bean.MyFile;\r\nimport com.antoine.maille.sr1.utils.printer.TreePrinter;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * Json implementation of the {@link TreePrinter} interface.\r\n */\r\npublic class JsonPrinter extends TreePrinter {\r\n\r\n\r\n    public JsonPrinter(boolean fullPath, boolean printSize,  boolean identation) {\r\n        super(fullPath, printSize,identation );\r\n    }\r\n\r\n    @Override\r\n    public String readResponse(List\u003cMyFile\u003e files) {\r\n        StringBuilder builder \u003d new StringBuilder(\&quot;{\\n\&quot;);\r\n        builder.append(this.readResponseHelper(files, 1));\r\n        builder.append(\&quot;}\\n\&quot;);\r\n        return builder.toString();\r\n    }\r\n\r\n    @Override\r\n    public String readResponseHelper(List\u003cMyFile\u003e files, int depth) {\r\n        StringBuilder builder \u003d new StringBuilder(\&quot;\&quot;);\r\n        for (MyFile file: files){\r\n            String spaces \u003d \&quot; \&quot;.repeat(Math.max(0, depth * 3));\r\n            if(identation) builder.append(spaces);\r\n            if(printSize) {\r\n                builder.append(\&quot; [\&quot;);\r\n                builder.append(file.getSize());\r\n                builder.append(\&quot;] \&quot;);\r\n            }\r\n            builder.append(this.fullPath ? file.getFullPath():file.getName());\r\n            if(file.isDir()){\r\n                builder.append(\&quot;:{\\n\&quot;);\r\n                builder.append(this.readResponseHelper(file.getChildren(), depth + 1));\r\n                if(identation) builder.append(spaces);\r\n                builder.append(\&quot;},\\n\&quot;);\r\n            }\r\n            else{\r\n                builder.append(\&quot;,\\n\&quot;);\r\n            }\r\n        }\r\n        return builder.toString();\r\n    }\r\n}\r\n&quot;},{&quot;name&quot;:&quot;package-info.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;/**\r\n * Implementation of the printer interface.\r\n */\r\npackage com.antoine.maille.sr1.utils.printer.impl;&quot;}]},{&quot;name&quot;:&quot;package-info.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;/**\r\n * Package to store all the printers used in the application.\r\n */\r\npackage com.antoine.maille.sr1.utils.printer;&quot;},{&quot;name&quot;:&quot;TreePrinter.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.utils.printer;\r\n\r\nimport com.antoine.maille.sr1.bean.MyFile;\r\n\r\nimport java.util.List;\r\n\r\npublic abstract class TreePrinter {\r\n\r\n    protected boolean fullPath;\r\n\r\n    protected boolean printSize;\r\n\r\n    protected boolean identation;\r\n\r\n    public TreePrinter(boolean fullPath, boolean printSize, boolean identation) {\r\n        this.fullPath \u003d fullPath;\r\n        this.printSize \u003d printSize;\r\n        this.identation \u003d identation;\r\n    }\r\n\r\n    public abstract String readResponse(List\u003cMyFile\u003e files);\r\n\r\n    protected abstract String readResponseHelper(List\u003cMyFile\u003e files, int depth);\r\n}\r\n&quot;}]},{&quot;name&quot;:&quot;Utils.java&quot;,&quot;type&quot;:&quot;FILE&quot;,&quot;content&quot;:&quot;package com.antoine.maille.sr1.utils;\r\n\r\nimport com.antoine.maille.sr1.command.commands.FTPCommand;\r\n\r\n/**\r\n * Utility class\r\n */\r\npublic class Utils {\r\n\r\n\r\n    public static FTPCommand parseCommand(String message){\r\n        String [] commandTab \u003d message.split(\&quot; \&quot;);\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Return if the line provided corresponds to a directory or not\r\n     * @param line the line to process\r\n     * @return if the file is a directory\r\n     */\r\n    public static boolean isDir(String line) {\r\n        return line.charAt(0) \u003d\u003d \u0027d\u0027;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the fileName from the line\r\n     * @param line the output format of a line from ls -l\r\n     * @return the fileName\r\n     */\r\n    public static String getFileName(String line) {\r\n        String[] parts \u003d line.split(\&quot; \&quot;);\r\n        return parts[parts.length - 1];\r\n    }\r\n\r\n    /**\r\n     * Retrieves the file size from the line\r\n     * @param line the output format of a line from ls -l\r\n     * @return the fileSize in a human-readable format\r\n     */\r\n    public static String getFileSize(String line) {\r\n        //transform the multiple spaces in the line with only one space :\r\n        line \u003d line.replaceAll(\&quot;\\\\s+\&quot;, \&quot; \&quot;);\r\n        String[] parts \u003d line.split(\&quot; \&quot;);\r\n        long size \u003d Long.parseLong(parts[parts.length - 5]);\r\n        String[] units \u003d new String[]{\&quot;B\&quot;, \&quot;KB\&quot;, \&quot;MB\&quot;, \&quot;GB\&quot;, \&quot;TB\&quot;};\r\n        int unitIndex \u003d size \u003d\u003d 0?0:(int) (Math.log10(size) / 3);\r\n        double unitValue \u003d size / Math.pow(1000, unitIndex);\r\n        return String.format(\&quot;%.1f\&quot;, unitValue) + units[unitIndex];\r\n    }\r\n\r\n    /**\r\n     * Returns if the file is hidden\r\n     * @param line the output format of a line from ls -l\r\n     * @return if the file is Hidden\r\n     */\r\n    public static boolean isHidden(String line) {\r\n        return Utils.getFileName(line).charAt(0) \u003d\u003d \u0027.\u0027;\r\n    }\r\n}\r\n&quot;}]}]}}]" />
  </component>
</application>